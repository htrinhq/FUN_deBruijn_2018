
==================== FINAL INTERFACE ====================
2019-03-02 09:22:05.095468 UTC

interface main:Main 8044
  interface hash: 6f13e28b94cffd21ea22b2e2b5836c96
  ABI hash: cc1ae76bebbb7e1c55e8fc51d3418de3
  export-list hash: 2d24118f203f81d731ace6dd05cd3de1
  orphan hash: ca62fdf03ac382917f004305d319042b
  flag hash: 926aa6a27a4d971368986cd7889ba071
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.allUnique
  Main.checkInput
  Main.checkNumber
  Main.exit
  Main.exitError
  Main.getRealLen
  Main.isNumeric
  Main.main
  Main.parse
  Main.rotate
  Main.usage
module dependencies:
package dependencies: base-4.11.1.0* deBruijn-0.1.0.0
                      ghc-prim-0.5.2.0 integer-gmp-1.0.2.0
orphans: base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity base-4.11.1.0:Data.Monoid
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:GHC.Generics
                         base-4.11.1.0:GHC.IO.Exception
import  -/  base-4.11.1.0:Data.Char 3e89818e2b8ef1a2cc5393163484da72
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.IO.Exception acc060dca2e46d8b8275d06ee7d5d60d
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Natural 8647cd09d4aefcb1ec93a2d9a92f1f1a
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:Numeric.Natural da273ddb373e0510fde98e17e4aa338f
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:System.Environment 06420d98d10ee04b8dda9c0d88032c55
import  -/  base-4.11.1.0:System.Exit a7af6f90beaa15182d3a20667d878df0
import  -/  base-4.11.1.0:System.IO e02b6055b5362a3eac04f83991602a53
import  -/  base-4.11.1.0:Text.Read 6c02630607b565ffcb34e8127673989b
import  -/  deBruijn-0.1.0.0:Lib 2f61ee9c4960e81199b9dc60bb148631
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
dee527ac51771ff40ca3c79ef247da24
  $s^ :: GHC.Types.Int -> GHC.Natural.Natural -> GHC.Types.Int
  {- Arity: 2, Strictness: <L,U(U)><S,U>, Inline: [1],
     Unfolding: (\ (x0 :: GHC.Types.Int) (y0 :: GHC.Natural.Natural) ->
                 let {
                   $j :: GHC.Types.Int <join 0>
                   = case y0 of wild {
                       GHC.Natural.NatS# a1
                       -> case Main.$s^3 of wild1 {
                            GHC.Natural.NatS# b1
                            -> case GHC.Prim.eqWord# a1 b1 of lwild {
                                 DEFAULT -> Main.$s^_f x0 wild 1# -> Main.$s^2 }
                            GHC.Natural.NatJ# ipv -> Main.$s^_f x0 wild }
                       GHC.Natural.NatJ# dt
                       -> case Main.$s^3 of wild1 {
                            GHC.Natural.NatS# ipv -> Main.$s^_f x0 wild
                            GHC.Natural.NatJ# dt1
                            -> let {
                                 nx# :: GHC.Integer.Type.GmpSize#
                                 = GHC.Prim.uncheckedIShiftRL# (GHC.Prim.sizeofByteArray# dt) 3#
                               } in
                               case GHC.Prim.==#
                                      nx#
                                      (GHC.Prim.uncheckedIShiftRL#
                                         (GHC.Prim.sizeofByteArray# dt1)
                                         3#) of lwild {
                                 DEFAULT -> Main.$s^_f x0 wild
                                 1#
                                 -> case {__pkg_ccall integer-gmp-1.0.2.0 GHC.Prim.ByteArray#
                                                                          -> GHC.Prim.ByteArray#
                                                                          -> GHC.Prim.Int#
                                                                          -> GHC.Prim.State#
                                                                               GHC.Prim.RealWorld
                                                                          -> (# GHC.Prim.State#
                                                                                  GHC.Prim.RealWorld,
                                                                                GHC.Prim.Int# #)}
                                           dt
                                           dt1
                                           nx#
                                           GHC.Prim.realWorld# of wild2 { (#,#) ds3 ds4 ->
                                    case ds4 of wild3 {
                                      DEFAULT -> Main.$s^_f x0 wild 0# -> Main.$s^2 } } } } }
                 } in
                 case y0 of wild {
                   GHC.Natural.NatS# a1
                   -> case Main.$s^3 of wild1 {
                        GHC.Natural.NatS# b1
                        -> case GHC.Prim.ltWord# a1 b1 of lwild {
                             DEFAULT -> $j 1# -> Main.$s^1 }
                        GHC.Natural.NatJ# ipv -> Main.$s^1 }
                   GHC.Natural.NatJ# dt
                   -> case Main.$s^3 of wild1 {
                        GHC.Natural.NatS# ipv -> $j
                        GHC.Natural.NatJ# dt1
                        -> let {
                             ny# :: GHC.Integer.Type.GmpSize#
                             = GHC.Prim.uncheckedIShiftRL# (GHC.Prim.sizeofByteArray# dt1) 3#
                           } in
                           let {
                             nx# :: GHC.Integer.Type.GmpSize#
                             = GHC.Prim.uncheckedIShiftRL# (GHC.Prim.sizeofByteArray# dt) 3#
                           } in
                           case GHC.Prim.==# nx# ny# of lwild {
                             DEFAULT
                             -> case GHC.Prim.<# nx# ny# of lwild1 {
                                  DEFAULT -> $j 1# -> Main.$s^1 }
                             1#
                             -> case {__pkg_ccall integer-gmp-1.0.2.0 GHC.Prim.ByteArray#
                                                                      -> GHC.Prim.ByteArray#
                                                                      -> GHC.Prim.Int#
                                                                      -> GHC.Prim.State#
                                                                           GHC.Prim.RealWorld
                                                                      -> (# GHC.Prim.State#
                                                                              GHC.Prim.RealWorld,
                                                                            GHC.Prim.Int# #)}
                                       dt
                                       dt1
                                       nx#
                                       GHC.Prim.realWorld# of wild2 { (#,#) ds ds1 ->
                                case GHC.Prim.<# (GHC.Prim.narrow32Int# ds1) 0# of lwild1 {
                                  DEFAULT -> $j 1# -> Main.$s^1 } } } } }) -}
4037c972197a0c88217594c9989277ee
  $s^1 :: GHC.Types.Int
  {- Strictness: x -}
f942973c3229cc18bb2fc6c0568d03f6
  $s^2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
5cde01d2dcf8cfee51adc84eb33661c3
  $s^3 :: GHC.Natural.Natural
  {- Unfolding: (case Main.$s^4 of wild {
                   GHC.Integer.Type.S# i#
                   -> case GHC.Prim.>=# i# 0# of lwild {
                        DEFAULT -> GHC.Natural.underflowError @ GHC.Natural.Natural
                        1# -> GHC.Natural.NatS# (GHC.Prim.int2Word# i#) }
                   GHC.Integer.Type.Jp# dt
                   -> case GHC.Prim.uncheckedIShiftRL#
                             (GHC.Prim.sizeofByteArray# dt)
                             3# of wild1 {
                        DEFAULT
                        -> case GHC.Prim.sizeofByteArray# dt of wild2 {
                             DEFAULT -> GHC.Natural.NatJ# dt
                             0# -> GHC.Natural.underflowError @ GHC.Natural.Natural }
                        1#
                        -> case GHC.Prim.indexWordArray# dt 0# of wild2 { DEFAULT ->
                           GHC.Natural.NatS# wild2 } }
                   GHC.Integer.Type.Jn# ipv
                   -> GHC.Natural.underflowError @ GHC.Natural.Natural }) -}
6dfbaa82821c50f25cf3f029cc8491d2
  $s^4 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
378c17e36baa223c7c6c27b67bbecec9
  $s^_f :: GHC.Types.Int -> GHC.Natural.Natural -> GHC.Types.Int
  {- Arity: 2, Strictness: <L,U(U)><L,U> -}
5d1f1541d52f16d9d3038d39afa87a98
  $seven1 :: GHC.Natural.Natural
  {- Unfolding: (case Main.$seven2 of wild {
                   GHC.Integer.Type.S# i#
                   -> case GHC.Prim.>=# i# 0# of lwild {
                        DEFAULT -> GHC.Natural.underflowError @ GHC.Natural.Natural
                        1# -> GHC.Natural.NatS# (GHC.Prim.int2Word# i#) }
                   GHC.Integer.Type.Jp# dt
                   -> case GHC.Prim.uncheckedIShiftRL#
                             (GHC.Prim.sizeofByteArray# dt)
                             3# of wild1 {
                        DEFAULT
                        -> case GHC.Prim.sizeofByteArray# dt of wild2 {
                             DEFAULT -> GHC.Natural.NatJ# dt
                             0# -> GHC.Natural.underflowError @ GHC.Natural.Natural }
                        1#
                        -> case GHC.Prim.indexWordArray# dt 0# of wild2 { DEFAULT ->
                           GHC.Natural.NatS# wild2 } }
                   GHC.Integer.Type.Jn# ipv
                   -> GHC.Natural.underflowError @ GHC.Natural.Natural }) -}
925dc3de0eaadaca4d0e2c9218c415d8
  $seven2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (2) -}
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
fc95e071d44b83c9f0864b450eb74209
  allUnique :: GHC.Classes.Eq a => [a] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)><S,1*U> -}
52731dd9bef5ee250d0776120d2de659
  allUnique_$sallUnique :: [GHC.Types.Char] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
cbb4eb366156ab3a9173dc7d3698791d
  checkInput :: [GHC.Types.Char] -> GHC.Base.String -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U> -}
df70a0d359efa66f1aa2c19b2377b407
  checkNumber :: GHC.Base.String -> GHC.Types.IO GHC.Natural.Natural
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.checkNumber1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Natural.Natural>_R)) -}
583532319ca2666430b5712f28ce53fc
  checkNumber1 ::
    GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Natural.Natural #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (n :: GHC.Base.String)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Natural.$fReadNatural_go
                        (Text.ParserCombinators.ReadP.run
                           @ GHC.Integer.Type.Integer
                           Main.checkNumber13
                           n) of wild {
                   []
                   -> case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             Main.checkNumber11
                             GHC.Types.True
                             eta of ds1 { (#,#) ipv ipv1 ->
                      GHC.Prim.raiseIO#
                        @ GHC.Exception.SomeException
                        @ GHC.Natural.Natural
                        Main.checkNumber8
                        ipv }
                   : ds ds1
                   -> case ds of wild1 { (,) ds2 ds3 ->
                      case ds3 of wild2 {
                        []
                        -> case ds1 of wild3 {
                             []
                             -> case GHC.Classes.$fEqModule_$s$c==
                                       n
                                       Main.checkNumber6 of wild4 {
                                  GHC.Types.False
                                  -> (# eta,
                                        case Text.Read.readEither8
                                               @ GHC.Natural.Natural
                                               (Text.ParserCombinators.ReadP.run
                                                  @ GHC.Natural.Natural
                                                  Main.checkNumber4
                                                  n) of wild5 {
                                          [] -> Main.checkNumber3
                                          : x ds4
                                          -> case ds4 of wild6 {
                                               [] -> x : ipv ipv1 -> Main.checkNumber2 } } #)
                                  GHC.Types.True
                                  -> case GHC.IO.Handle.Text.hPutStr2
                                            GHC.IO.Handle.FD.stdout
                                            Main.checkNumber11
                                            GHC.Types.True
                                            eta of ds4 { (#,#) ipv ipv1 ->
                                     GHC.Prim.raiseIO#
                                       @ GHC.Exception.SomeException
                                       @ GHC.Natural.Natural
                                       Main.checkNumber8
                                       ipv } }
                             : ipv ipv1
                             -> case GHC.IO.Handle.Text.hPutStr2
                                       GHC.IO.Handle.FD.stdout
                                       Main.checkNumber11
                                       GHC.Types.True
                                       eta of ds4 { (#,#) ipv2 ipv3 ->
                                GHC.Prim.raiseIO#
                                  @ GHC.Exception.SomeException
                                  @ GHC.Natural.Natural
                                  Main.checkNumber8
                                  ipv2 } }
                        : ipv ipv1
                        -> case GHC.IO.Handle.Text.hPutStr2
                                  GHC.IO.Handle.FD.stdout
                                  Main.checkNumber11
                                  GHC.Types.True
                                  eta of ds4 { (#,#) ipv2 ipv3 ->
                           GHC.Prim.raiseIO#
                             @ GHC.Exception.SomeException
                             @ GHC.Natural.Natural
                             Main.checkNumber8
                             ipv2 } } } }) -}
bc0761ad3d120d3eff694863715bf843
  checkNumber10 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 84#) -}
0dbd6588525849a405d8beed3969cba1
  checkNumber11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   Main.checkNumber12) -}
baa526825f459b6bf9ca7690bb3a05d6
  checkNumber12 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("USAGE: ./deBruijn n [a] [--check|--unique|--clean]\n\
                 \\n\
                 \\t--check\t\tcheck if a sequence is a de Bruijn sequence\n\
                 \\t--unique\tcheck if 2 sequences are distinct de Bruijn sequences\n\
                 \\t--clean\t\tlist cleaning\n\
                 \\tn\t\torder of the sequence\n\
                 \\ta\t\talphabet [def: \\226\\128\\15601\\226\\128\\157]"#) -}
f15ddcd3234ad086d65532874abec3aa
  checkNumber13 ::
    Text.ParserCombinators.ReadP.P GHC.Integer.Type.Integer
  {- Unfolding: (GHC.Read.$fReadInteger_$sreadNumber
                   GHC.Read.$fReadInteger2
                   Text.ParserCombinators.ReadPrec.minPrec
                   @ GHC.Integer.Type.Integer
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ GHC.Integer.Type.Integer)) -}
c4925347b638a5b0891cb0ef6d869f99
  checkNumber2 :: GHC.Natural.Natural
  {- Strictness: x -}
3c1bd9b76b551f2f7fb2506a9da6fe13
  checkNumber3 :: GHC.Natural.Natural
  {- Strictness: x -}
d4a952bc9f837d1bb523ab8a4cf599ba
  checkNumber4 :: Text.ParserCombinators.ReadP.P GHC.Natural.Natural
  {- Unfolding: (Main.checkNumber5
                   (Text.Read.readEither7 @ GHC.Natural.Natural)) -}
3529dbcd253a48548311462f42c0c07f
  checkNumber5 ::
    (GHC.Natural.Natural
     -> Text.ParserCombinators.ReadP.P GHC.Natural.Natural)
    -> Text.ParserCombinators.ReadP.P GHC.Natural.Natural
  {- Unfolding: (GHC.Natural.$fReadNatural4
                   Text.ParserCombinators.ReadPrec.minPrec
                   @ GHC.Natural.Natural) -}
5bb4f28169f4b7679b1f8001acf18e67
  checkNumber6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.checkNumber7) -}
06242161e3fa893797255551384ca198
  checkNumber7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("0"#) -}
c5918dbdc558af668ea7ac321afb20e6
  checkNumber8 :: GHC.Exception.SomeException
  {- Unfolding: (GHC.IO.Exception.$fExceptionExitCode_$ctoException
                   Main.checkNumber9) -}
1c6da7cdcef99fab2c3253c836d17379
  checkNumber9 :: GHC.IO.Exception.ExitCode
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.IO.Exception.ExitFailure Main.checkNumber10) -}
d5e7ffe1e989f298b8007f26eb1e5d33
  exit :: GHC.Types.IO a
  {- Arity: 1, Strictness: <B,U>x,
     Unfolding: InlineRule (0, True, True)
                System.Exit.exitSuccess1
                  `cast`
                (forall (a :: <*>_N). Sym (GHC.Types.N:IO[0] <a>_R)) -}
a1c528d1d951892965bd93317d77e3b1
  exitError :: GHC.Types.IO a
  {- Arity: 1, Strictness: <B,U>x,
     Unfolding: InlineRule (0, True, True)
                Main.exitError1
                  `cast`
                (forall (a :: <*>_N). Sym (GHC.Types.N:IO[0] <a>_R)) -}
ef65a7099033a402449c2b4dcf1d0d91
  exitError1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
  {- Arity: 1, Strictness: <B,U>x -}
9b515b20333b6df13691667cf81a61a0
  getRealLen ::
    [GHC.Types.Char] -> GHC.Natural.Natural -> GHC.Types.Int
  {- Arity: 2, Strictness: <L,1*U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (str :: [GHC.Types.Char]) (n :: GHC.Natural.Natural) ->
                 Main.$s^
                   (case GHC.List.$wlenAcc @ GHC.Types.Char str 0# of ww2 { DEFAULT ->
                    GHC.Types.I# ww2 })
                   n) -}
7e7af616e8699a56ec126c2fd72cb653
  isNumeric :: GHC.Base.String -> GHC.Types.Bool
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (str :: GHC.Base.String) ->
                 case GHC.Natural.$fReadNatural_go
                        (Text.ParserCombinators.ReadP.run
                           @ GHC.Integer.Type.Integer
                           Main.checkNumber13
                           str) of wild {
                   [] -> GHC.Types.False
                   : ds ds1
                   -> case ds of wild1 { (,) ds2 ds3 ->
                      case ds3 of wild2 {
                        []
                        -> case ds1 of wild3 {
                             [] -> GHC.Types.True : ipv ipv1 -> GHC.Types.False }
                        : ipv ipv1 -> GHC.Types.False } } }) -}
5b8927a1aac226286121f251e64b32a3
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
5ea9aa088ace1dd9de15df49e3cb1b5d
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (Foreign.Marshal.Alloc.allocaBytesAligned
                         @ Foreign.C.Types.CInt
                         @ [GHC.Base.String]
                         Foreign.Storable.$fStorableBool7
                         Foreign.Storable.$fStorableBool7
                         System.Environment.getArgs1
                           `cast`
                         (<GHC.Ptr.Ptr Foreign.C.Types.CInt>_R
                          ->_R Sym (GHC.Types.N:IO[0] <[GHC.Base.String]>_R)))
                        `cast`
                      (GHC.Types.N:IO[0] <[GHC.Base.String]>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 Main.main2 @ () ipv1 ipv }) -}
01bc422e1084f3332ebb5b41d87ee5bd
  main2 ::
    [[GHC.Types.Char]]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, b #)
  {- Arity: 2, Strictness: <S,1*U><S,U> -}
c7afd7519dd7d87f0b63c12eaf6b5cb0
  main3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
9bb6b1a27c9b8971a5aa07b053b8c52e
  parse :: [[GHC.Types.Char]] -> GHC.Types.IO b
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main2
                  `cast`
                (forall (b :: <*>_N).
                 <[[GHC.Types.Char]]>_R ->_R Sym (GHC.Types.N:IO[0] <b>_R)) -}
7a322ce4d9d199131e00699f6e230509
  rotate :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (xs :: GHC.Base.String) ->
                 case xs of wild {
                   [] -> Main.rotate1
                   : ipv ipv1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        ipv1
                        (GHC.Types.:
                           @ GHC.Types.Char
                           ipv
                           (GHC.Types.[] @ GHC.Types.Char)) }) -}
5432536d5ed5358d6e1bd3a55e05a34d
  rotate1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   (GHC.Types.[] @ GHC.Types.Char)
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ef8ce3f9e5a67a0f9de203097c6d17ee
  usage :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Main.usage1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
db68dd60321964d2f8d4eb08c7db3189
  usage1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Main.checkNumber11
                   GHC.Types.True) -}
"SPEC allUnique @ Char" forall ($dEq :: GHC.Classes.Eq
                                          GHC.Types.Char)
  Main.allUnique @ GHC.Types.Char $dEq = Main.allUnique_$sallUnique
"SPEC/Main ^ @ Int @ Natural" [orphan] [1] forall ($dIntegral :: GHC.Real.Integral
                                                                   GHC.Natural.Natural)
                                                  ($dNum :: GHC.Num.Num GHC.Types.Int)
  GHC.Real.^ @ GHC.Types.Int @ GHC.Natural.Natural $dNum $dIntegral
  = Main.$s^
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

