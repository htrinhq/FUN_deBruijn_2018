
==================== FINAL INTERFACE ====================
2019-03-03 12:37:27.624277 UTC

interface main:Main 8044
  interface hash: f533f33da8a93df599026c03e0fe39c9
  ABI hash: 089a19d5d21343ab381dd6af03482224
  export-list hash: 6bdd6143ebd336e4bd3a66b596645520
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 926aa6a27a4d971368986cd7889ba071
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.allUnique
  Main.arrayFromInput
  Main.check
  Main.checkInput
  Main.checkNumber
  Main.checkRead
  Main.createTab
  Main.exit
  Main.exitError
  Main.getRealLen
  Main.isNumeric
  Main.isUnique
  Main.main
  Main.parse
  Main.rotate
  Main.usage
module dependencies:
package dependencies: base-4.11.1.0* deBruijn-0.1.0.0
                      ghc-prim-0.5.2.0 integer-gmp-1.0.2.0
orphans: base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity base-4.11.1.0:Data.Monoid
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:GHC.Generics
                         base-4.11.1.0:GHC.IO.Exception
import  -/  base-4.11.1.0:Data.Char 3e89818e2b8ef1a2cc5393163484da72
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.IO.Exception acc060dca2e46d8b8275d06ee7d5d60d
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:System.Environment 06420d98d10ee04b8dda9c0d88032c55
import  -/  base-4.11.1.0:System.Exit a7af6f90beaa15182d3a20667d878df0
import  -/  base-4.11.1.0:System.IO e02b6055b5362a3eac04f83991602a53
import  -/  base-4.11.1.0:Text.Read 6c02630607b565ffcb34e8127673989b
import  -/  deBruijn-0.1.0.0:Lib 7cb682d06e89c598875d00d119770443
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
2f0cc744bdf3b9c8f68e247f46901faa
  $wcreateTab ::
    GHC.Base.String
    -> GHC.Prim.Int# -> [GHC.Base.String] -> [GHC.Base.String]
  {- Arity: 3, Strictness: <S,U><S,U><S,U>, Inline: [0] -}
fc89907e004b6e76fd5a0e01cb981ff2
  $wgetRealLen :: [GHC.Types.Char] -> GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 2, Strictness: <L,1*U><S,U>, Inline: [0],
     Unfolding: (\ (w :: [GHC.Types.Char]) (ww :: GHC.Prim.Int#) ->
                 case GHC.Prim.<# ww 0# of lwild {
                   DEFAULT
                   -> case ww of wild1 {
                        DEFAULT
                        -> case GHC.List.$wlenAcc @ GHC.Types.Char w 0# of ww2 { DEFAULT ->
                           GHC.Real.$wf1 ww2 wild1 }
                        0# -> 1# }
                   1# -> case GHC.Real.^2 ret_ty GHC.Prim.Int# of {} }) -}
41b37943a05e354c5691ae812c128177
  $wisUnique ::
    GHC.Base.String
    -> GHC.Base.String -> GHC.Prim.Int# -> GHC.Types.Bool
  {- Arity: 3, Strictness: <S,U><L,U><S,U>, Inline: [0] -}
fc95e071d44b83c9f0864b450eb74209
  allUnique :: GHC.Classes.Eq a => [a] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)><S,1*U> -}
52731dd9bef5ee250d0776120d2de659
  allUnique_$sallUnique :: [GHC.Types.Char] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
089481610efcbe226447c4c90aa0deb7
  arrayFromInput ::
    [GHC.Base.String] -> GHC.Types.IO [GHC.Base.String]
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.arrayFromInput1
                  `cast`
                (<[GHC.Base.String]>_R
                 ->_R Sym (GHC.Types.N:IO[0] <[GHC.Base.String]>_R)) -}
12c30c30af0a7721b9f87212c28d8307
  arrayFromInput1 ::
    [GHC.Base.String]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Base.String] #)
  {- Arity: 2, Strictness: <L,U><S,U> -}
c393901d35e18918cd47dda38634d66a
  check ::
    GHC.Base.String
    -> GHC.Base.String -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 3, Strictness: <S,U><L,U><L,1*U(U)>,
     Unfolding: (\ (input :: GHC.Base.String)
                   (alphabet :: GHC.Base.String)
                   (nb :: GHC.Types.Int) ->
                 case Main.checkInput input alphabet of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case nb of ww { GHC.Types.I# ww1 ->
                      case Main.$wgetRealLen alphabet ww1 of ww2 { DEFAULT ->
                      case GHC.List.$wlenAcc
                             @ GHC.Types.Char
                             input
                             0# of ww3 { DEFAULT ->
                      case GHC.Prim.==# ww2 ww3 of lwild {
                        DEFAULT -> GHC.Types.False
                        1#
                        -> case GHC.List.$wlenAcc
                                  @ [GHC.Types.Char]
                                  (Data.OldList.nubBy
                                     @ GHC.Base.String
                                     GHC.Base.eqString
                                     (Main.$wcreateTab input ww1 (GHC.Types.[] @ GHC.Base.String)))
                                  0# of ww4 { DEFAULT ->
                           GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# ww4 ww2) } } } } } }) -}
d967b33dd531cbe40734cf14c5eaa966
  checkInput :: GHC.Base.String -> GHC.Base.String -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U> -}
3254551faf7c6c8586f390bd29ca5535
  checkNumber :: GHC.Base.String -> GHC.Base.Maybe GHC.Types.Int
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (n :: GHC.Base.String) ->
                 case Text.ParserCombinators.ReadP.run
                        @ GHC.Types.Int
                        Main.checkNumber4
                        n of wild {
                   [] -> GHC.Base.Nothing @ GHC.Types.Int
                   : ds ds1
                   -> case ds of wild1 { (,) ds2 ds3 ->
                      case ds3 of wild2 {
                        []
                        -> case ds1 of wild3 {
                             []
                             -> case GHC.Classes.$fEqModule_$s$c==
                                       n
                                       Main.checkNumber2 of wild4 {
                                  GHC.Types.False
                                  -> case Text.Read.readEither8
                                            @ GHC.Types.Int
                                            (Text.ParserCombinators.ReadP.run
                                               @ GHC.Types.Int
                                               Main.checkNumber1
                                               n) of wild5 {
                                       []
                                       -> case Data.Maybe.fromJust1
                                          ret_ty (GHC.Base.Maybe GHC.Types.Int)
                                          of {}
                                       : x ds4
                                       -> case ds4 of wild6 {
                                            []
                                            -> case x of wild7 { GHC.Types.I# x1 ->
                                               case GHC.Prim.>=# x1 0# of lwild {
                                                 DEFAULT -> GHC.Base.Nothing @ GHC.Types.Int
                                                 1# -> GHC.Base.Just @ GHC.Types.Int wild7 } }
                                            : ipv ipv1
                                            -> case Data.Maybe.fromJust1
                                               ret_ty (GHC.Base.Maybe GHC.Types.Int)
                                               of {} } }
                                  GHC.Types.True -> GHC.Base.Nothing @ GHC.Types.Int }
                             : ipv ipv1 -> GHC.Base.Nothing @ GHC.Types.Int }
                        : ipv ipv1 -> GHC.Base.Nothing @ GHC.Types.Int } } }) -}
f54f5c4ff9bc5f6ff14dc304c9117c55
  checkNumber1 :: Text.ParserCombinators.ReadP.P GHC.Types.Int
  {- Unfolding: (GHC.Read.$fReadInt_$sreadNumber
                   GHC.Read.$fReadInt2
                   Text.ParserCombinators.ReadPrec.minPrec
                   @ GHC.Types.Int
                   (Text.Read.readEither7 @ GHC.Types.Int)) -}
aabb55419ba66a4ad1bdd98d418d5192
  checkNumber2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.checkNumber3) -}
ef883b93551cf8330cc528ab53245edb
  checkNumber3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("0"#) -}
3b9066873e6fe5789f96579a8cf82710
  checkNumber4 :: Text.ParserCombinators.ReadP.P GHC.Types.Int
  {- Unfolding: (GHC.Read.$fReadInt_$sreadNumber
                   GHC.Read.$fReadInt2
                   Text.ParserCombinators.ReadPrec.minPrec
                   @ GHC.Types.Int
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ GHC.Types.Int)) -}
766b1c1283cbf24cd3f3c76f9ea97ff1
  checkRead ::
    GHC.Base.Maybe GHC.Types.Int -> GHC.Base.Maybe GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (mnb :: GHC.Base.Maybe GHC.Types.Int) ->
                 case mnb of wild {
                   GHC.Base.Nothing
                   -> case Data.Maybe.fromJust1
                      ret_ty (GHC.Base.Maybe GHC.Types.Int)
                      of {}
                   GHC.Base.Just x
                   -> case x of wild1 { GHC.Types.I# x1 ->
                      case GHC.Prim.>=# x1 0# of lwild {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Int 1# -> wild } } }) -}
14cd6e24259a156b38558783b621577f
  createTab ::
    GHC.Base.String
    -> GHC.Types.Int -> [GHC.Base.String] -> [GHC.Base.String]
  {- Arity: 3, Strictness: <S,U><S(S),1*U(U)><S,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Base.String)
                   (w1 :: GHC.Types.Int)
                   (w2 :: [GHC.Base.String]) ->
                 case w1 of ww { GHC.Types.I# ww1 -> Main.$wcreateTab w ww1 w2 }) -}
d5e7ffe1e989f298b8007f26eb1e5d33
  exit :: GHC.Types.IO a
  {- Arity: 1, Strictness: <B,U>x,
     Unfolding: InlineRule (0, True, True)
                System.Exit.exitSuccess1
                  `cast`
                (forall (a :: <*>_N). Sym (GHC.Types.N:IO[0] <a>_R)) -}
a1c528d1d951892965bd93317d77e3b1
  exitError :: GHC.Types.IO a
  {- Arity: 1, Strictness: <B,U>x,
     Unfolding: InlineRule (0, True, True)
                Main.exitError1
                  `cast`
                (forall (a :: <*>_N). Sym (GHC.Types.N:IO[0] <a>_R)) -}
ef65a7099033a402449c2b4dcf1d0d91
  exitError1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
  {- Arity: 1, Strictness: <B,U>x -}
3b63117f58bea366263cec08194b125a
  getRealLen :: [GHC.Types.Char] -> GHC.Types.Int -> GHC.Types.Int
  {- Arity: 2, Strictness: <L,1*U><S(S),1*U(U)>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: [GHC.Types.Char]) (w1 :: GHC.Types.Int) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case Main.$wgetRealLen w ww1 of ww2 { DEFAULT ->
                 GHC.Types.I# ww2 } }) -}
5b7d4bf7a65a842292e42d272fd0f946
  isNumeric :: GHC.Base.String -> GHC.Types.Bool
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (str :: GHC.Base.String) ->
                 case Text.ParserCombinators.ReadP.run
                        @ GHC.Types.Int
                        Main.checkNumber4
                        str of wild {
                   [] -> GHC.Types.False
                   : ds ds1
                   -> case ds of wild1 { (,) ds2 ds3 ->
                      case ds3 of wild2 {
                        []
                        -> case ds1 of wild3 {
                             [] -> GHC.Types.True : ipv ipv1 -> GHC.Types.False }
                        : ipv ipv1 -> GHC.Types.False } } }) -}
ed7785493574168a3fccc4d33c4630ad
  isUnique ::
    GHC.Base.String
    -> GHC.Base.String -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 3, Strictness: <S,U><L,U><S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Base.String)
                   (w1 :: GHC.Base.String)
                   (w2 :: GHC.Types.Int) ->
                 case w2 of ww { GHC.Types.I# ww1 -> Main.$wisUnique w w1 ww1 }) -}
2a6be9c96434a93a51a93725d6274ea3
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
29ac8fe603c7a71e01104da52fbc342a
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (Foreign.Marshal.Alloc.allocaBytesAligned
                         @ Foreign.C.Types.CInt
                         @ [GHC.Base.String]
                         Foreign.Storable.$fStorableBool7
                         Foreign.Storable.$fStorableBool7
                         System.Environment.getArgs1
                           `cast`
                         (<GHC.Ptr.Ptr Foreign.C.Types.CInt>_R
                          ->_R Sym (GHC.Types.N:IO[0] <[GHC.Base.String]>_R)))
                        `cast`
                      (GHC.Types.N:IO[0] <[GHC.Base.String]>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 Main.main2 ipv1 ipv }) -}
4d84702dc2a2e70cbb6d3b30a331b2af
  main2 ::
    [[GHC.Types.Char]]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,1*U><S,U> -}
6182f7e1dc297f922a11af4c9199d724
  main3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
14ab78b40aa20da3f8ce59a0850ff82f
  parse :: [[GHC.Types.Char]] -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main2
                  `cast`
                (<[[GHC.Types.Char]]>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
7a322ce4d9d199131e00699f6e230509
  rotate :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (xs :: GHC.Base.String) ->
                 case xs of wild {
                   [] -> Main.rotate1
                   : ipv ipv1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        ipv1
                        (GHC.Types.:
                           @ GHC.Types.Char
                           ipv
                           (GHC.Types.[] @ GHC.Types.Char)) }) -}
5432536d5ed5358d6e1bd3a55e05a34d
  rotate1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   (GHC.Types.[] @ GHC.Types.Char)
                   (GHC.Types.[] @ GHC.Types.Char)) -}
32b9cdd1e57eda892a2940676b5c839b
  usage :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Main.usage1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
d6264e41c78112aa932a7ebd822297b7
  usage1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Main.usage2
                   GHC.Types.True) -}
dc1fb606d52b1c24d6d3f2692dfca715
  usage2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8# Main.usage3) -}
2afe86a029677fb510e888d25252cc89
  usage3 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("USAGE: ./deBruijn n [a] [--check|--unique|--clean]\n\
                 \\n\
                 \\t--check\t\tcheck if a sequence is a de Bruijn sequence\n\
                 \\t--unique\tcheck if 2 sequences are distinct de Bruijn sequences\n\
                 \\t--clean\t\tlist cleaning\n\
                 \\tn\t\torder of the sequence\n\
                 \\ta\t\talphabet [def: \\226\\128\\15601\\226\\128\\157]"#) -}
"SPEC allUnique @ Char" forall ($dEq :: GHC.Classes.Eq
                                          GHC.Types.Char)
  Main.allUnique @ GHC.Types.Char $dEq = Main.allUnique_$sallUnique
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

